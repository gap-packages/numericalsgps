#############################################################################
##
#W  affine.gd               Manuel Delgado <mdelgado@fc.up.pt>
#W                          Pedro A. Garcia-Sanchez <pedro@ugr.es>
##
#Y  Copyright .........
#############################################################################



###############################################################################
#O BelongsToAffineSemigroup
# Determines if the vector v is in the affine semigroup a
###########################################################################
DeclareOperation("BelongsToAffineSemigroup",[IsHomogeneousList,IsAffineSemigroup]);

###############################################################################
#F BasisOfGroupGivenByEquations
# Computes a basis of a subgroup of Z^n with defining equations 
# Ax =0 \in Z_m1\times\Z_mt \times Z^k, k is n-length(m),
# m=[m1,...,mt]
###########################################################################
DeclareGlobalFunction("BasisOfGroupGivenByEquations");

#############################################################
### 
#F EquationsOfGroupGeneratedBy
# Computes the defining equations of the group of Z^n 
# generated by M
# the output is [A,m] such that Ax=0 mod m are the equations
############################################################
DeclareGlobalFunction("EquationsOfGroupGeneratedBy");


##############################################################
###
#F GluingOfAffineSemigroups
# Determines if there is a gluing of the two affine semigroups
# if so, returns the gluin of them, and fail otherwise
##############################################################
DeclareGlobalFunction("GluingOfAffineSemigroups");

################################################################
###
#F IsFullAffineSemigroup
# Detects if the affine semigroup is full: the nonnegative 
# of the the group spanned by it coincides with the semigroup
# itself; or in other words, if a,b\in S and a-b\in \mathbb N^n,
# then a-b\in S
################################################################
## moved to affine-def
#DeclareGlobalFunction("IsFullAffineSemigroup");



###############################################################################
#F FactorizationsVectorWRTList
#
# Computes the set of factorizations of v in terms of the elements of ls 
# That is, a Hilbert basis for ls*X=v
# While using normaliz or 4ti2:
# If ls contains vectors that generate a nonreduced monoid, then it 
# deprecates the infinite part of the solutions, or in other words, it
# returns only the minimal solutions of the above system of equations
# If not using nomaliz: then the above can cause an infinite loop
########################################################################
DeclareGlobalFunction("FactorizationsVectorWRTList_gap");
DeclareGlobalFunction("FactorizationsVectorWRTList_4ti2");
DeclareGlobalFunction("FactorizationsVectorWRTList_Normaliz");
DeclareSynonym("FactorizationsVectorWRTList",FactorizationsVectorWRTList_4ti2);

###############################################################################
#F BettiElementsOfAffineSemigroup
# Computes the Betti elements of the affine semigroup a
###########################################################################
DeclareGlobalFunction("BettiElementsOfAffineSemigroup",[IsAffineSemigroup]);

############################################################
#F GeneratorsOfKernelCongruence 
# computes a set of generators of the kernel congruence 
# of the monoid morphism associated to the matrix m 
############################################################
DeclareGlobalFunction("GeneratorsOfKernelCongruence_4ti2");
DeclareGlobalFunction("GeneratorsOfKernelCongruence_Singular");
DeclareSynonym("GeneratorsOfKernelCongruence",GeneratorsOfKernelCongruence_4ti2);


###############################################################################
#F MinimalPresentationOfAffineSemigroup
# Computes a minimal presentation of the affine semigroup a
###########################################################################
DeclareGlobalFunction("MinimalPresentationOfAffineSemigroup");


#############################################################################
##
#F  IsUniquelyPresentedAffineSemigroup(a)
##
##  For an affine semigroup s, checks it it has a unique minimal presentation
##  Basado en GS-O
##
#############################################################################
DeclareGlobalFunction("IsUniquelyPresentedAffineSemigroup");

#############################################################################
##
#F  IsGenericAffineSemigroup(a)
##
##  For an affine semigroup a, checks it it has a generic presentation,
##  that is, in every relation all minimal generators appear. These semigroups are uniquely
##  presented véase B-GS-G.
##
#############################################################################
DeclareGlobalFunction("IsGenericAffineSemigroup");

#############################################################################
##
#F ShadedSetOfElementInAffineSemigroup(x,a)
## computes the shading set of x in a as defined in 
##  -Székely, L. A.; Wormald, N. C. Generating functions for the Frobenius 
##    problem with 2 and 3 generators. Math. Chronicle 15 (1986), 49–57.
#############################################################################
DeclareGlobalFunction("ShadedSetOfElementInAffineSemigroup");


###############################################################################
#F CatenaryDegreeOfAffineSemigroup
# Computes the catenary degree of the affine semigroup a
###########################################################################
DeclareGlobalFunction("CatenaryDegreeOfAffineSemigroup");
DeclareGlobalFunction("CatenaryDegreeOfAffineSemigroup_seq");

#############################################################################
##
#F  HilbertBasisOfSystemOfHomogeneousEquations
#
# Computes the Hilbert basis of the system A X=0 mod md, where the rows
# of A are the elements of ls.
# md can be empty of have some modulus, if the length of md is smaller than 
# the lengths of the elements of ls, then the rest of equations are considered
# to be homogeneous linear Diophantine equations
##########################################################################
DeclareGlobalFunction("HilbertBasisOfSystemOfHomogeneousEquations_4ti2");
DeclareGlobalFunction("HilbertBasisOfSystemOfHomogeneousEquations_Normaliz");
DeclareSynonym("HilbertBasisOfSystemOfHomogeneousEquations",HilbertBasisOfSystemOfHomogeneousEquations_Normaliz);

#############################################################################
##
#F  HilbertBasisOfSystemOfHomogeneousInequalities
#
# Computes the Hilbert basis of the system ls*X>=0 over the nonnegative 
# integers
##########################################################################
DeclareGlobalFunction("HilbertBasisOfSystemOfHomogeneousInequalities_4ti2");
DeclareGlobalFunction("HilbertBasisOfSystemOfHomogeneousInequalities_Normaliz");
DeclareSynonym("HilbertBasisOfSystemOfHomogeneousInequalities", HilbertBasisOfSystemOfHomogeneousInequalities_Normaliz);

###############################################################################
##
#F OmegaPrimalityOfElementInAffineSemigroup
#
# Computes the omega-primality of v in the monoid a
###########################################################################
DeclareGlobalFunction("OmegaPrimalityOfElementInAffineSemigroup_Normaliz");
DeclareGlobalFunction("OmegaPrimalityOfElementInAffineSemigroup_4ti2");
DeclareSynonym("OmegaPrimalityOfElementInAffineSemigroup", OmegaPrimalityOfElementInAffineSemigroup_Normaliz);


###############################################################################
##
#F OmegaPrimalityOfAffineSemigroup
#
# Computes the omega primality of the affine semigroup a
###########################################################################
DeclareGlobalFunction("OmegaPrimalityOfAffineSemigroup");

###############################################################################
#F ElasticityOfAffineSemigroup
# Computes the elasticity of the affine semigroup a
###########################################################################
DeclareGlobalFunction("ElasticityOfAffineSemigroup");

###############################################################################
##
#F Lawrence lifting of an affine semigroup
##############################################################################
DeclareGlobalFunction("LawrenceLiftingOfAffineSemigroup");


###############################################################################
##
#O PrimitiveElementsOfAffineSemigroup
# An implementation of PrimitiveElementsOfAffineSemigroup
#####################################################################
DeclareGlobalFunction("PrimitiveElementsOfAffineSemigroup_gap");
DeclareGlobalFunction("PrimitiveElementsOfAffineSemigroup_4ti2");
DeclareGlobalFunction("PrimitiveElementsOfAffineSemigroup_Normaliz");
DeclareGlobalFunction("PrimitiveElementsOfAffineSemigroup_Singular");
DeclareSynonym("PrimitiveElementsOfAffineSemigroup", PrimitiveElementsOfAffineSemigroup_4ti2);

###############################################################################
##
#F TameDegreeOfAffineSemigroup
# Computes the tame degree of the affine semigroup a
###########################################################################
DeclareGlobalFunction("TameDegreeOfAffineSemigroup");

###############################################################################
## 
###############################################################################
###############################################################################
##
#F RandomAffineSemigroup
# Returns an affine semigroup generated by a random n'*d' matrix where d' (the dimension) is randomly choosen from [1..d] and n' (the number of generators) is randomly choosen from [1..n]
###########################################################################
DeclareGlobalFunction("RandomAffineSemigroup");

###############################################################################
##
#F RandomFullAffineSemigroup
# Computes the tame degree of the affine semigroup a
###########################################################################
DeclareGlobalFunction("RandomFullAffineSemigroup");

